
  # "A man is not dead while his name is still spoken." - http://www.gnuterrypratchett.com/#nginx
  add_header X-Clacks-Overhead "GNU Terry Pratchett";

  ## DNS-Resolver
  resolver 8.8.8.8 8.8.4.4 valid=300s;
	resolver_timeout 5s;

  ## Allow downloads form the current domain
  add_header "Access-Control-Allow-Origin" $http_origin;

  # The X-Frame-Options header indicates whether a browser should be allowed
  # to render a page within a frame or iframe.
  add_header X-Frame-Options SAMEORIGIN;

  # MIME type sniffing security protection
  ##There are very few edge cases where you wouldn't want this enabled.
  add_header X-Content-Type-Options nosniff;

  # The X-XSS-Protection header is used by Internet Explorer version 8+
  # The header instructs IE to enable its inbuilt anti-cross-site scripting filter.
  add_header X-XSS-Protection "1; mode=block";

  # with Content Security Policy (CSP) enabled (and a browser that supports it (http://caniuse.com/#feat=contentsecuritypolicy),
  # you can tell the browser that it can only download content from the domains you explicitly allow
  # CSP can be quite difficult to configure, and cause real issues if you get it wrong
  # There is website that helps you generate a policy here http://cspisawesome.com/
  # add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self' https://www.google-analytics.com;";

	## Block SQL injections
	set $block_sql_injections 0;
	if ($query_string ~ "union.*select.*\(") {
		set $block_sql_injections 1;
	}
	if ($query_string ~ "union.*all.*select.*") {
		set $block_sql_injections 1;
	}
	if ($query_string ~ "concat.*\(") {
		set $block_sql_injections 1;
	}
	if ($block_sql_injections = 1) {
		return 403;
	}

	## Block file injections
#	set $block_file_injections 0;
#	if ($query_string ~ "[a-zA-Z0-9_]=http://") {
#		set $block_file_injections 1;
#	}
#	if ($query_string ~ "[a-zA-Z0-9_]=(\.\.//?)+") {
#		set $block_file_injections 1;
#	}
#	if ($query_string ~ "[a-zA-Z0-9_]=/([a-z0-9_.]//?)+") {
#		set $block_file_injections 1;
#	}
#	if ($block_file_injections = 1) {
#		return 403;
#	}

	## Block common exploits
	set $block_common_exploits 0;
	if ($query_string ~ "(<|%3C).*script.*(>|%3E)") {
		set $block_common_exploits 1;
	}
	if ($query_string ~ "GLOBALS(=|\[|\%[0-9A-Z]{0,2})") {
		set $block_common_exploits 1;
	}
	if ($query_string ~ "_REQUEST(=|\[|\%[0-9A-Z]{0,2})") {
		set $block_common_exploits 1;
	}
	if ($query_string ~ "proc/self/environ") {
		set $block_common_exploits 1;
	}
	if ($query_string ~ "mosConfig_[a-zA-Z_]{1,21}(=|\%3D)") {
		set $block_common_exploits 1;
	}
	if ($query_string ~ "base64_(en|de)code\(.*\)") {
		set $block_common_exploits 1;
	}
	if ($block_common_exploits = 1) {
		return 403;
	}

#location ~ ^(\s+)\.(png|jpe?g)$ {
#  set $useWebP Z;
#
#  if ($http_accept ~* "webp") {
#    set $useWebP A;
#  }
#
#  if (-f $1.webp) {
#    set $useWebP "${useWebP}B";
#  }
#
#  if ($useWebP = "AB") {
#    # Warning: "add_header" in location, reset parent add_header values
#    add_header Vary Accept;
#    return 302 $1.webp;
#  }
#}

	## remove any multislashes //
# if ($request_uri ~* "\/\/") {
#   rewrite ^(.*)$ $scheme://$host$1 permanent;
# }

  ## www eifuegen
# if ($host !~* ^(www|subdomain)) {
#   rewrite ^(.*)$ $scheme://www.$host$1 permanent;
# }

  ## www vorne entfernen
#  if ($host ~* ^www\.(.*)) {
#    set $host_without_www $1;
#    rewrite ^(.*)$ $scheme://$host_without_www$1 permanent;
#  }

  ## https nur fuer wp-admin
# if ($request_uri !~* "/wp-") {
#   rewrite ^(.*)$ $scheme://$host/$1 permanent;
# }

  ## immer SSL verwenden
# rewrite ^(.*) https://$server_name$1 permanent;

  ## immer HTTP verwenden
# rewrite ^(.*) http://$server_name$1 permanent;

	## don't use php-files in other directories
  location ~ \..*/.*\.php$ {
    return 403;
  }

  # deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac)
  location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
  }

  ## all files/directories that are protected and unaccessible from the web
  location ~* ^.*(\.(?:htaccess|bak|conf|config|dist|fla|in[ci]|log|psd|sh|sql|yml|db|twig|stxt|git|svn|rb|sw[op]|po[t]*))$ {
    return 404;
  }

  ## disable all methods besides HEAD, GET and POST
  if ( $request_method !~ ^(GET|HEAD|POST)$ ) {
    return 444;
  }

  ## protect the readme.html file to not reveal the installed version
# location = /readme.html {
#   auth_basic "Restricted Access"; # auth realm
#   auth_basic_user_file .htpasswd-users; # htpasswd file
# }

  ## if no favicon exists return a 204 (no content error)
  location = /favicon.ico {
    try_files $uri =204;
    log_not_found off;
    access_log off;
  }

  ## don't log robots.txt requests
  location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
  }

  ## static files are served directly & don't log
  location ~* \.(?:png|jpe?g|jpeg|gif|svg|ico|m4a|mp[34]|mov|ogg|flv|mid|midi|wav|bmp|rtf|zip|tgz|tar|gz|rar|doc|xls|exe|bz2|pdf|txt|ppt[x]*)$ {
    autoindex off;
    expires max;
    # Warning: "add_header" in location, reset parent add_header values
		# We bypass all delays in the post-check and pre-check parameters of Cache-Control. Both set to 0.
    add_header Pragma public;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate, post-check=0, pre-check=0";
    #access_log off;
    log_not_found off;
    ## No need to bleed constant updates. Send the all shebang in one
    ## fell swoop.
    tcp_nodelay off;
    ## Set the OS file cache.
    open_file_cache max=3000 inactive=120s;
    open_file_cache_valid 45s;
    open_file_cache_min_uses 2;
    open_file_cache_errors off;
    break;
  }

  ## static files are served directly
  location ~* \.(?:js|css|htm?|js\?ver\s*|css\?ver.*)$ {
#    set $betterForCache  0;
#
#    if ($args ~* ver=(.*)$) {
#      set $betterForCache  1;
#    }
#
#    if ($request_uri ~* "/wp-admin") {
#      set $betterForCache  0;
#    }
#
#    if ($betterForCache = 1) {
#      rewrite ^(.*) $scheme://$host$uri? last;
#    }

		gzip_static on;

    autoindex off;
    expires 7d;
    # Warning: "add_header" in location, reset parent add_header values
    # We bypass all delays in the post-check and pre-check parameters of Cache-Control. Both set to 0.
    add_header Pragma public;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate, post-check=0, pre-check=0";

    ## No need to bleed constant updates. Send the all shebang in one
    ## fell swoop.
    tcp_nodelay off;

		## Set the OS file cache.
		open_file_cache max=3000 inactive=120s;
		open_file_cache_valid 45s;
		open_file_cache_min_uses 2;
		open_file_cache_errors off;

    break;
  }

	# ----------------------------------------- maybe we are done here

  if (-f $request_filename) {
    break;
  }

